#include <stdio.h>
#include <conio.h>
#include <windows.h>
#include <stdlib.h>
#include <time.h>

const int width = 80;
const int height = 25;
const int area = 2000;
int validoptions[6];
int validoptionsindex;

void getneighboringindexes(int index){

	validoptionsindex = 0;

	validoptions[validoptionsindex++] = index-width-1;
	validoptions[validoptionsindex++] = index-width+1;
	validoptions[validoptionsindex++] = index+width-1;
	validoptions[validoptionsindex++] = index+width+1;
	
	if ((index/width)%2 == 0){ //horizontal
		if (index%width - 2 > 0){
			validoptions[validoptionsindex++] = index - 2;
		}
		if (index%width + 2 < width){
			validoptions[validoptionsindex++] = index + 2;
		}
	}
	else{ //vertical
		if (index/width - 2 > 0){
			validoptions[validoptionsindex++] = index - 2*width;
		}
		if (index/width + 2 < height){
			validoptions[validoptionsindex++] = index + 2*width;
		}
	}
}

int main(){

	int mazearray[2000];
	int validstarts[2000];
	int prevoptions[5];
	int validstartsindex = 0;
	int newstart = 1;
	CHAR_INFO chararray[2000];

	int *bufferhandle = CreateConsoleScreenBuffer(GENERIC_WRITE ,FILE_SHARE_WRITE,NULL,CONSOLE_TEXTMODE_BUFFER,NULL);
	int r;
	int i;
	int j;
	int currentindex;
	int prevoptionsindex = 0;
	for (i = 0;i<area;i++){
		chararray[i].Attributes = FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE;
	}

	CONSOLE_CURSOR_INFO cursorinfo;
	cursorinfo.dwSize = 10;
	cursorinfo.bVisible = FALSE;
	
	COORD topleft;
	topleft.X = 0;
	topleft.Y = 0;
	
	COORD bottomright;
	bottomright.X = 80;
	bottomright.Y = 25;
	
	SMALL_RECT box;
	box.Left = 0;
	box.Top = 0;
	box.Right = 80;
	box.Bottom = 25;
	
	SetConsoleCursorInfo(bufferhandle,&cursorinfo);
	SetConsoleActiveScreenBuffer(bufferhandle);
	srand (time(NULL)); //seed random numbers with time

	system("title Prepare to be A-Mazed");
	
	for (i = 0;i < area;i++){
		mazearray[i] = 0;
	}
	
	for (i = 0; i < width; i++){
		mazearray[i] = 1;
		mazearray[(width*(height-1))+i] = 1;
	}
	
	for (i = 0; i < height; i++){
		mazearray[i*width] = 1;
		mazearray[i*width + width-1] = 1;
	}

	//set valid initial starting points
	for (i = 1; i < (width)/2; i++){
		mazearray[i*2+1*width] = 3;
		validstarts[validstartsindex++] = i*2+1*width;
		
		mazearray[i*2+(height-3)*width + width*(height%2)] = 3;
		validstarts[validstartsindex++] = i*2+(height-3)*width + width*(height%2);
	}
	
	for (i = 1; i < (height)/2; i++){
		mazearray[i*2*width + 1] = 3;
		validstarts[validstartsindex++] = i*2*width + 1;
		
		mazearray[(i*2)*width + width-3-width%2] = 3;
		validstarts[validstartsindex++] = (i*2)*width + width-3-width%2;
	}

	//main loop
	while (validstartsindex > 0){
		//if (kbhit()){
		if (1){
			//getch();
			if (newstart){
				r = rand()%(validstartsindex);
				currentindex = validstarts[r];
				validstarts[r] = validstarts[--validstartsindex];
				
				newstart = 0;
			}
			//Set chosen index (either from new start, or previous iteration's selection) to a wall.
			mazearray[currentindex] = 1;
			if ((currentindex/width)%2 == 0){
				mazearray[currentindex+1] = 1;
				mazearray[currentindex-1] = 1;
			}
			else{
				mazearray[currentindex+width] = 1;
				mazearray[currentindex-width] = 1;
			}
				
			getneighboringindexes(currentindex);

			//
			for (i = 0; i < validoptionsindex;){
				switch (mazearray[validoptions[i]]){
					//Set all white options to gold, and track
					case 0:
						mazearray[validoptions[i]] = 4;
					case 4:
						i++;
						break;
					
					//Blue options, remove and set to red. Also find the matching validstarts[] index, and remove that entry
					case 3:
						mazearray[validoptions[i]] = 2;
						for (j = 0;  j < validstartsindex; j++){
							if (validoptions[i] == validstarts[j]){
								validstarts[j] = validstarts[--validstartsindex];
								break;
							}
						}
						
					//Wall, Red, and Blue options - remove.
					case 1:
					case 2:
						validoptions[i] = validoptions[--validoptionsindex];
						break;
				}
			}

			
			//select an option
			if (validoptionsindex > 0){
				r = rand()%(validoptionsindex);
				currentindex = validoptions[r];
			}
			else{
				newstart = 1;
			}
			
			//evaluate previous options against current options
			//old options not included in current options are removed.
			int found;
			for (i = 0; i < prevoptionsindex;){
				found = 0;
				for (j = 0; j < validoptionsindex; j++){
					if (prevoptions[i] == validoptions[j]){
						found = 1;
						break;
					}
				}
				if (found == 1){
					prevoptions[i] = prevoptions[--prevoptionsindex];
				}
				else{
					i++;
				}
			}
			
			for (i = 0; i < prevoptionsindex; i++){
				//convert gold to blue, add as valid starts
				if (mazearray[prevoptions[i]] == 4){
					//if (rand()%3 == 0){
						mazearray[prevoptions[i]] = 3;
						validstarts[validstartsindex++] = prevoptions[i];
					//}
					//else{
					//	mazearray[prevoptions[i]] = 2;
					//}
				}
			}
			
			prevoptionsindex = 0;
			for (i = 0; i < validoptionsindex; i++){
				prevoptions[i] = validoptions[i];
				prevoptionsindex++;
			}
							
			
			// the part where the values are actually drawn.

			for (i = 0;i < area; i++){
				switch (mazearray[i]){
					case 0:
						chararray[i].Attributes = BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE;
						break;
					case 1:
						chararray[i].Attributes = 0;
						break;
					case 2:
						chararray[i].Attributes = BACKGROUND_RED;
						break;
					case 3:
						chararray[i].Attributes = BACKGROUND_BLUE;
						break;
					case 4: 
						chararray[i].Attributes = BACKGROUND_GREEN | BACKGROUND_RED;
						break;
					case 5: 
						chararray[i].Attributes = BACKGROUND_GREEN;
						break;
				}
			}
			WriteConsoleOutput(bufferhandle,chararray,bottomright,topleft,&box);
		}
	}
	
	for (i = 0; i < area; i++){
		if (mazearray[i] > 1){
			mazearray[i] = 0;
		}
	}
	
	//set values of the CHAR_INFO array buffer to the array values
	for (i = 0;i < area; i++){
		switch (mazearray[i]){
			case 0:
				chararray[i].Attributes = BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE;
				break;
			case 1:
				chararray[i].Attributes = 0;
				break;
			case 2:
				chararray[i].Attributes = BACKGROUND_RED;
				break;
			case 3:
				chararray[i].Attributes = BACKGROUND_BLUE;
				break;
			case 4: 
				chararray[i].Attributes = BACKGROUND_GREEN | BACKGROUND_RED;
				break;
		}
	}

	WriteConsoleOutput(bufferhandle,chararray,bottomright,topleft,&box);
		
	while (1){
		if (kbhit()){
			break;
		}
	}
	//
	SetConsoleActiveScreenBuffer(GetStdHandle(STD_OUTPUT_HANDLE));
}